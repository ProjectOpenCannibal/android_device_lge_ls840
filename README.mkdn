## Current Recovery Build Status

####Current CWM Build Status
<a href='http://jenkins.gitmanagement.tk/job/CWM%20for%20the%20LG%20Viper%204G%20LTE/'><img src='http://jenkins.gitmanagement.tk/job/CWM%20for%20the%20LG%20Viper%204G%20LTE/badge/icon'></a>

####Current TWRP Build Status
<a href='http://jenkins.gitmanagement.tk/job/TWRP%20for%20the%20LG%20Viper%204G%20LTE/'><img src='http://jenkins.gitmanagement.tk/job/TWRP%20for%20the%20LG%20Viper%204G%20LTE/badge/icon'></a>

####Current COT Build Status
<a href='http://jenkins.gitmanagement.tk/job/COT%20for%20the%20LG%20Viper%204G%20LTE/'><img src='http://jenkins.gitmanagement.tk/job/COT%20for%20the%20LG%20Viper%204G%20LTE/badge/icon'></a>

####Current CM9 Build Status

-----------------------------------------------

<WIP>



HOW-TO BUILD:
=============
 
**This short guide assumes you're on Ubuntu 12.04**

Setting up a build environment on Ubuntu 12.04
-----------------------------------------------
Install the Java 6 JDK like this.

    $ mkdir ~/src

    $ cd ~/src

    $ git clone https://github.com/flexiondotorg/oab-java6.git

    $ cd ~/src/oab-java6

    $ sudo ./oab-java.sh

Then when its finished, install the java packages you just built:

    $ sudo apt-get install sun-java6-plugin sun-java6-jre sun-java6-bin sun-java6-jdk

Then follow the guide on the AOSP Page:

http://source.android.com/source/initializing.html


Getting the (right) source
--------------------------

First, we need to create directories for the build (system can be whatever you want to name your working directory):

    $ mkdir -p ~/bin

    $ mkdir -p ~/android/system

Now we'll need repo. Let's download it and make it executable:

    $ curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo

    $ chmod a+x ~/bin/repo

Log out and back in so the changes take effect.

Now initialized the repository and pull the source (with my repos attached):

    $ cd ~/android/system/
    
    $ repo init -u git://github.com/CyanogenMod/android.git -b jellybean
    
    $ repo sync -j10

Depending on your connection, this might take awhile.

Building TWRP Recovery
----------------------
    $ cd ~/android/system/bootable/

    $ mv recovery ~/abackupfolderhere //probably a better way to do this.

    $ git clone https://github.com/TeamWin/Team-Win-Recovery-Project.git ~/android/system/bootable/recovery

    $ cd ~/android/system

    $ lunch full_ls840-eng

    $ make -j recoveryimage

WIP - Extract necessary binaries and proprietary files 
------------------------------------------------

We will need to reuse some proprietary files from the stock ROM and build our vendor tree (script(s) do it all ;):

    $ cd
    
    $ cd ~/android/system/device/lge/ls840
    
    $ ./extract-files.sh

Building CM10
-------------
Once thats done you can start compiling.

Follow the aosp instructions on setting up the build environment. - http://source.android.com/source/download.html

When the environment is setup, we need to grab a copy of Koush's ROM Manager and the Term.apk. This is necessary to build CM9.

    $ cd ~/android/system/vendor/cm

    $ ./get-prebuilts

Now, we build (android/system being your work directory path):

    $ cd ~/android/system

To build for the LG ls840:
    
    $ . build/envsetup.sh && brunch ls840


Installing CM10
---------------
If the build was successful, you can now take the update zip found in out/target/product/ls840/ and flash using a custom recovery. Make sure to grab the latest Gapps to complete the experience.

When you want to rebuild with new changes to the BoardConfig.mk or after syncing to the latest CM src make sure to do the following before you recompile.

    $ make clobber


